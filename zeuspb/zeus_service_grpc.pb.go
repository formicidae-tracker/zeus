// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: zeuspb/zeus_service.proto

package zeuspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ZeusClient is the client API for Zeus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZeusClient interface {
	StartClimate(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*Empty, error)
	GetStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Status, error)
	StopClimate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type zeusClient struct {
	cc grpc.ClientConnInterface
}

func NewZeusClient(cc grpc.ClientConnInterface) ZeusClient {
	return &zeusClient{cc}
}

func (c *zeusClient) StartClimate(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/fort.zeus.proto.Zeus/StartClimate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeusClient) GetStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/fort.zeus.proto.Zeus/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeusClient) StopClimate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/fort.zeus.proto.Zeus/StopClimate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZeusServer is the server API for Zeus service.
// All implementations must embed UnimplementedZeusServer
// for forward compatibility
type ZeusServer interface {
	StartClimate(context.Context, *StartRequest) (*Empty, error)
	GetStatus(context.Context, *Empty) (*Status, error)
	StopClimate(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedZeusServer()
}

// UnimplementedZeusServer must be embedded to have forward compatible implementations.
type UnimplementedZeusServer struct {
}

func (UnimplementedZeusServer) StartClimate(context.Context, *StartRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartClimate not implemented")
}
func (UnimplementedZeusServer) GetStatus(context.Context, *Empty) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedZeusServer) StopClimate(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopClimate not implemented")
}
func (UnimplementedZeusServer) mustEmbedUnimplementedZeusServer() {}

// UnsafeZeusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZeusServer will
// result in compilation errors.
type UnsafeZeusServer interface {
	mustEmbedUnimplementedZeusServer()
}

func RegisterZeusServer(s grpc.ServiceRegistrar, srv ZeusServer) {
	s.RegisterService(&Zeus_ServiceDesc, srv)
}

func _Zeus_StartClimate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeusServer).StartClimate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fort.zeus.proto.Zeus/StartClimate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeusServer).StartClimate(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zeus_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeusServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fort.zeus.proto.Zeus/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeusServer).GetStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zeus_StopClimate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeusServer).StopClimate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fort.zeus.proto.Zeus/StopClimate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeusServer).StopClimate(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Zeus_ServiceDesc is the grpc.ServiceDesc for Zeus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Zeus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fort.zeus.proto.Zeus",
	HandlerType: (*ZeusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartClimate",
			Handler:    _Zeus_StartClimate_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _Zeus_GetStatus_Handler,
		},
		{
			MethodName: "StopClimate",
			Handler:    _Zeus_StopClimate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zeuspb/zeus_service.proto",
}
